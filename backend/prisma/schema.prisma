// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Gender {
  Male
  Female
}

enum Role {
  Member
  Admin
}

model User {
  id            String         @id @default(uuid())
  email         String?        @unique
  password      String?
  name          String?
  gender        Gender?
  phoneNumber   String?
  role          Role           @default(Member)
  accessToken   String?
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())

  OAuthUsers  OAuthUser[]
  EmailUser   EmailUser[]
  transaction Transaction[]

  @@map("users")
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("refreshTokens")
}

model OAuthUser {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  oAuthProvider   OAuthProvider @relation(fields: [oAuthProviderId], references: [id])
  oAuthProviderId String
  oAuthId         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())

  @@map("oAuthUsers")
}

model OAuthProvider {
  id          String      @id @default(uuid())
  name        String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  OAuthUser   OAuthUser[]

  @@map("oAuthProviders")
}

model EmailUser {
  id                     String                   @id @default(uuid())
  user                   User                     @relation(fields: [userId], references: [id])
  userId                 String
  email                  String
  password               String
  isEmailConfirmation    Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  EmailValidationHistory EmailValidationHistory[]

  @@unique([userId, email])
  @@map("emailUsers")
}

model EmailValidationHistory {
  id          String    @id @default(uuid())
  emailUser   EmailUser @relation(fields: [emailUserId], references: [id])
  emailUserId String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@map("emailValidationHistories")
}

model Game {
  id                 String   @id @default(uuid())
  gameCategoryId     String
  name               String
  description        String   @db.LongText
  cloudinaryPublicId String?
  image              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  vouchers Voucher[]

  gameCategory GameCategory @relation(fields: [gameCategoryId], references: [id])

  @@map("games")
}

model GameCategory {
  id                 String   @id @default(uuid())
  name               String
  cloudinaryPublicId String?
  image              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  games Game[]

  @@map("gameCategories")
}

enum DiscountType {
  Percentage
  Price
}

model Discount {
  id        String       @id @default(uuid())
  voucherId String
  code      String
  from      DateTime     @db.Date
  to        DateTime     @db.Date
  value     BigInt
  type      DiscountType @default(Price)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())

  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@map("discounts")
}

model Banner {
  id                 String   @id @default(uuid())
  name               String
  cloudinaryPublicId String?
  image              String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  @@map("banners")
}

model SpecialOffer {
  id          String   @id @default(uuid())
  name        String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("specialOffers")
}

model Voucher {
  id            String   @id @default(uuid())
  gameId        String
  voucherTypeId String
  name          String
  price         BigInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  transactions Transaction[]
  discounts    Discount[]

  game        Game        @relation(fields: [gameId], references: [id])
  voucherType VoucherType @relation(fields: [voucherTypeId], references: [id])

  @@map("vouchers")
}

model VoucherType {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  vouchers Voucher[]

  @@map("voucherTypes")
}

enum TransactionStatus {
  Waiting
  Pending
  Success
  Failed
}

model Transaction {
  id                 String            @id @default(uuid())
  userId             String
  voucherId          String
  transactionNumber  String            @unique
  price              BigInt
  discount           BigInt            @default(0)
  status             TransactionStatus @default(Waiting)
  cloudinaryPublicId String?
  image              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())

  user    User    @relation(fields: [userId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  transactionHistories TransactionHistory[]

  @@map("transactions")
}

model TransactionHistory {
  id            String   @id @default(uuid())
  transactionId String
  title         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("transactionHistories")
}
